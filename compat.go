package figtree

// Providing backwards compatible option names for the generic type

type BoolOption = Option[bool]
type ByteOption = Option[byte]
type Complex128Option = Option[complex128]
type Complex64Option = Option[complex64]
type ErrorOption = Option[error]
type Float32Option = Option[float32]
type Float64Option = Option[float64]
type Int16Option = Option[int16]
type Int32Option = Option[int32]
type Int64Option = Option[int64]
type Int8Option = Option[int8]
type IntOption = Option[int]
type RuneOption = Option[rune]
type StringOption = Option[string]
type Uint16Option = Option[uint16]
type Uint32Option = Option[uint32]
type Uint64Option = Option[uint64]
type Uint8Option = Option[uint8]
type UintOption = Option[uint]
type UintptrOption = Option[uintptr]
type RawTypeOption = Option[any]

type MapBoolOption = MapOption[bool]
type MapByteOption = MapOption[byte]
type MapComplex128Option = MapOption[complex128]
type MapComplex64Option = MapOption[complex64]
type MapErrorOption = MapOption[error]
type MapFloat32Option = MapOption[float32]
type MapFloat64Option = MapOption[float64]
type MapInt16Option = MapOption[int16]
type MapInt32Option = MapOption[int32]
type MapInt64Option = MapOption[int64]
type MapInt8Option = MapOption[int8]
type MapIntOption = MapOption[int]
type MapRuneOption = MapOption[rune]
type MapStringOption = MapOption[string]
type MapUint16Option = MapOption[uint16]
type MapUint32Option = MapOption[uint32]
type MapUint64Option = MapOption[uint64]
type MapUint8Option = MapOption[uint8]
type MapUintOption = MapOption[uint]
type MapUintptrOption = MapOption[uintptr]
type MapRawTypeOption = MapOption[any]

type ListBoolOption = ListOption[bool]
type ListByteOption = ListOption[byte]
type ListComplex128Option = ListOption[complex128]
type ListComplex64Option = ListOption[complex64]
type ListErrorOption = ListOption[error]
type ListFloat32Option = ListOption[float32]
type ListFloat64Option = ListOption[float64]
type ListInt16Option = ListOption[int16]
type ListInt32Option = ListOption[int32]
type ListInt64Option = ListOption[int64]
type ListInt8Option = ListOption[int8]
type ListIntOption = ListOption[int]
type ListRuneOption = ListOption[rune]
type ListStringOption = ListOption[string]
type ListUint16Option = ListOption[uint16]
type ListUint32Option = ListOption[uint32]
type ListUint64Option = ListOption[uint64]
type ListUint8Option = ListOption[uint8]
type ListUintOption = ListOption[uint]
type ListUintptrOption = ListOption[uintptr]
type ListRawTypeOption = ListOption[any]

var NewBoolOption = NewOption[bool]
var NewByteOption = NewOption[byte]
var NewComplex128Option = NewOption[complex128]
var NewComplex64Option = NewOption[complex64]
var NewErrorOption = NewOption[error]
var NewFloat32Option = NewOption[float32]
var NewFloat64Option = NewOption[float64]
var NewInt16Option = NewOption[int16]
var NewInt32Option = NewOption[int32]
var NewInt64Option = NewOption[int64]
var NewInt8Option = NewOption[int8]
var NewIntOption = NewOption[int]
var NewRuneOption = NewOption[rune]
var NewStringOption = NewOption[string]
var NewUint16Option = NewOption[uint16]
var NewUint32Option = NewOption[uint32]
var NewUint64Option = NewOption[uint64]
var NewUint8Option = NewOption[uint8]
var NewUintOption = NewOption[uint]
var NewUintptrOption = NewOption[uintptr]
var NewRawTypeOption = NewOption[any]
